---
import MainLayout from '../../layouts/MainLayout.astro';
import Hero from '../../components/Hero.astro';
import { getSiteInfo, getPageData, getVinilosPaginados, getTodosLosVinilos } from '../../lib/wordpress.js';

// Helper para quitar HTML de la descripci√≥n
const stripHtml = (html) =>
  html?.replace?.(/<[^>]*>/g, '').trim() || '';

// Configuraci√≥n
const itemsPerPage = 32; // Aumentamos para 4 columnas (8 filas x 4 = 32)
const url = new URL(Astro.request.url);
const page = Math.max(1, parseInt(url.searchParams.get('p') || '1', 10));
const searchQuery = url.searchParams.get('search') || '';

// Inicializa variables
let hasError = false;
let errorMessage = '';
let siteInfo = null;
let pageData = null;
let vinilosData = null;

try {
  siteInfo = await getSiteInfo();
  pageData = await getPageData('vinilos');
  
  // Si hay b√∫squeda, cargar TODOS los vinilos para buscar globalmente
  if (searchQuery && searchQuery.trim() !== '') {
    console.log(`üîç Realizando b√∫squeda global para: "${searchQuery}"`);
    
    // Cargar TODOS los vinilos usando la nueva funci√≥n
    const todosLosVinilosData = await getTodosLosVinilos();
    
    console.log(`‚úÖ Total de vinilos cargados para b√∫squeda: ${todosLosVinilosData.total}`);
    
    vinilosData = {
      vinilos: todosLosVinilosData.vinilos,
      pageInfo: {
        total: todosLosVinilosData.total,
        totalVinilos: todosLosVinilosData.total,
        totalPages: Math.ceil(todosLosVinilosData.total / itemsPerPage),
        currentPage: page,
        hasNext: false,
        hasPrevious: false
      }
    };
  } else {
    // Paginaci√≥n normal
    vinilosData = await getVinilosPaginados({ page, itemsPerPage });
  }
  
  if (!siteInfo || !siteInfo.title) throw new Error('No se pudo obtener el t√≠tulo del sitio desde WordPress');
} catch (error) {
  hasError = true;
  errorMessage = `Error conectando con WordPress: ${error.message}`;
}

// Listas de vinilos y paginaci√≥n
let vinilos = hasError ? [] : (vinilosData?.vinilos || []);
let totalVinilosOriginales = vinilos.length;
let pageInfo = vinilosData?.pageInfo || {};
let totalPages = pageInfo.totalPages || 1;

// FILTRAR POR B√öSQUEDA si hay t√©rmino de b√∫squeda
if (searchQuery && searchQuery.trim() !== '') {
  const searchTerm = searchQuery.toLowerCase().trim();
  vinilos = vinilos.filter(vinilo => {
    const title = (vinilo.title || '').toLowerCase();
    const artist = (vinilo.camposVinilo?.vsArtista || '').toLowerCase();
    const album = (vinilo.camposVinilo?.vsAlbum || '').toLowerCase();
    
    return title.includes(searchTerm) || 
           artist.includes(searchTerm) || 
           album.includes(searchTerm);
  });
  console.log(`üîç B√∫squeda '${searchQuery}': ${vinilos.length} vinilos encontrados de ${totalVinilosOriginales} totales`);
  
  // Paginaci√≥n del lado del cliente para resultados de b√∫squeda
  const totalResultados = vinilos.length;
  const totalPagesSearch = Math.ceil(totalResultados / itemsPerPage);
  const startIndex = (page - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  
  // Aplicar paginaci√≥n a los resultados filtrados
  vinilos = vinilos.slice(startIndex, endIndex);
  
  // Sobrescribir pageInfo para resultados de b√∫squeda
  pageInfo = {
    totalPages: totalPagesSearch,
    currentPage: page,
    total: totalResultados,
    totalVinilos: totalResultados,
    hasNext: page < totalPagesSearch,
    hasPrevious: page > 1
  };
  
  // Actualizar totalPages
  totalPages = totalPagesSearch;
}

// ======= CORRECCI√ìN: MOSTRAR TOTAL GLOBAL DE VINILOS =========
// Para b√∫squedas, guardar el total original antes del filtrado
const TOTAL_VINILOS_GLOBAL = 4218; // Total real de vinilos en la base de datos
const totalVinilosGlobal = searchQuery ? totalVinilosOriginales : (pageInfo.totalVinilos || pageInfo.total || TOTAL_VINILOS_GLOBAL);
const totalVinilos = searchQuery ? vinilos.length : totalVinilosGlobal; // Para b√∫squedas, mostrar los encontrados

const heroTitle = hasError ? "Error - Vinilos" : (pageData?.title || "Vinilos recomendados por VinylStation Radio");
const heroDescription = hasError ? "Error cargando contenido" : (pageData?.excerpt || "Descubre nuestra selecci√≥n cuidada de vinilos cl√°sicos, ediciones limitadas y novedades.");
const pageTitle = hasError ? 'Error - Vinilos' : (pageData?.seo?.title || `${heroTitle} - VinylStation`);
const pageDescription = hasError ? 'Error cargando contenido' : (pageData?.seo?.metaDesc || heroDescription);

// Estad√≠sticas para el hero
const heroStats = [
  {
    number: searchQuery ? totalVinilosOriginales.toString() : totalVinilosGlobal.toString(),
    label: searchQuery ? 'Total Vinilos' : 'Vinilos'
  },
  ...(searchQuery ? [{
    number: totalVinilos.toString(),
    label: 'Encontrados',
    highlight: true
  }] : []),
  {
    number: '33‚Öì',
    label: 'RPM'
  },
  {
    number: '24h',
    label: 'M√∫sica'
  }
];

// Acciones para el hero
const heroActions = [
  {
    text: 'Explorar Programas',
    href: '/programas',
    type: 'secondary' as const
  },
  {
    text: 'Ver Vinilos',
    href: '#vinilos',
    type: 'primary' as const
  }
];

// Helpers para paginaci√≥n visible (m√°ximo 3 botones)
let paginasVisibles = [];
if (totalPages <= 3) {
  paginasVisibles = Array.from({ length: totalPages }, (_, i) => i + 1);
} else {
  if (page === 1) {
    paginasVisibles = [1, 2, 3];
  } else if (page === totalPages) {
    paginasVisibles = [totalPages - 2, totalPages - 1, totalPages];
  } else {
    paginasVisibles = [page - 1, page, page + 1];
  }
  paginasVisibles = paginasVisibles.filter(p => p >= 1 && p <= totalPages);
}

// Funci√≥n para construir URLs con par√°metros de b√∫squeda
const buildSearchUrl = (pageNum, search = searchQuery) => {
  const params = new URLSearchParams();
  if (pageNum > 1) params.set('p', pageNum);
  if (search && search.trim() !== '') params.set('search', search);
  const queryString = params.toString();
  return queryString ? `/vinilos?${queryString}` : '/vinilos';
};
---
<MainLayout title={pageTitle} description={pageDescription}>
  <div class="main-content">
    {hasError ? (
      <div class="container hero-container">
        <div class="error-container">
          <div class="error-icon">üìÄ</div>
          <h1 class="error-title">Error Cargando Vinilos</h1>
          <p class="error-message">{errorMessage}</p>
          <div class="error-details">
            <h3>Posibles soluciones:</h3>
            <ul>
              <li>Verifica conexi√≥n a: https://cms.vinylstation.es/graphql</li>
              <li>Comprueba que WordPress est√© funcionando</li>
              <li>Revisa configuraci√≥n de GraphQL y ACF</li>
              <li>Aseg√∫rate de que los vinilos tengan campos configurados</li>
            </ul>
          </div>
          <div class="error-actions">
            <button onclick="window.location.reload()" class="btn primary-btn">
              üîÑ Reintentar
            </button>
            <a href="/" class="btn secondary-btn">‚Üê Volver al inicio</a>
          </div>
        </div>
      </div>
    ) : (
      <>
        {/* HERO UNIFICADO */}
        <Hero 
          title={heroTitle}
          description={heroDescription}
          showPlayer={true}
          showStats={true}
          stats={heroStats}
          showActions={true}
          actions={heroActions}
        />

        {/* VINILOS */}
        <section id="vinilos" class="vinyl-section">
          <div class="container">
            <div class="section-header">
              <div class="section-title-row">
                <h2>Todos los Vinilos</h2>
                <form class="search-form" method="GET" action="/vinilos" id="searchForm">
                  <input 
                    type="hidden" 
                    name="p" 
                    value="1"
                  />
                  <div class="search-input-group">
                    <input 
                      type="text" 
                      name="search" 
                      class="search-input"
                      placeholder="Buscar vinilos, artistas, √°lbumes..."
                      value={searchQuery}
                    />
                    <button type="submit" class="search-button">
                      <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                        <path d="M21 21L16.514 16.506L21 21ZM19 10.5C19 15.194 15.194 19 10.5 19C5.806 19 2 15.194 2 10.5C2 5.806 5.806 2 10.5 2C15.194 2 19 5.806 19 10.5Z" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                      </svg>
                    </button>
                    {searchQuery && (
                      <a href="/vinilos" class="clear-search" title="Limpiar b√∫squeda">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                          <path d="M18 6L6 18M6 6l12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                      </a>
                    )}
                  </div>
                </form>
              </div>
              <p>
                {searchQuery ? (
                  vinilos.length > 0 ?
                    `Se encontraron ${vinilos.length} vinilos que coinciden con "${searchQuery}" de un total de ${totalVinilosOriginales} vinilos` :
                    `No se encontraron vinilos que coincidan con "${searchQuery}". Se busc√≥ entre ${totalVinilosOriginales} vinilos.`
                ) : (
                  "Explora nuestra colecci√≥n completa de vinilos, desde cl√°sicos atemporales hasta las √∫ltimas novedades en formato anal√≥gico."
                )}
              </p>
            </div>
            {vinilos.length > 0 ? (
              <>
                <div class="vinyl-grid">
                  {vinilos.map((vinilo) => {
                    const imagen =
                      vinilo.imagenPrincipalUrl ||
                      vinilo.imagenPrincipal?.sourceUrl ||
                      '/images/placeholder-vinyl.jpg';

                    return (
                      <div class="vinyl-card">
                        <div class="vinyl-image">
                          <img
                            src={imagen}
                            alt={vinilo.imagenPrincipal?.altText || vinilo.title}
                            loading="lazy"
                            onerror="this.src='/images/placeholder-vinyl.jpg'"
                          />
                          <div class="vinyl-overlay">
                            <a href={`/vinilos/${vinilo.slug || vinilo.databaseId}`} class="vinyl-link">
                              Ver Detalles
                            </a>
                          </div>
                        </div>
                        <div class="vinyl-info">
                          <h3 class="vinyl-title-card">{vinilo.title}</h3>
                        </div>
                      </div>
                    );
                  })}
                </div>

                {/* Paginaci√≥n */}
                <nav class="pagination">
                  <ul>
                    <li>
                      {page > 1 ? (
                        <a href={buildSearchUrl(page - 1)} class="pagination-link">Anterior</a>
                      ) : (
                        <span class="pagination-link disabled">Anterior</span>
                      )}
                    </li>
                    {paginasVisibles.map((p) => (
                      <li>
                        {p === page ? (
                          <span class="pagination-link current">{p}</span>
                        ) : (
                          <a href={buildSearchUrl(p)} class="pagination-link">{p}</a>
                        )}
                      </li>
                    ))}
                    <li>
                      {page < totalPages ? (
                        <a href={buildSearchUrl(page + 1)} class="pagination-link">Siguiente</a>
                      ) : (
                        <span class="pagination-link disabled">Siguiente</span>
                      )}
                    </li>
                  </ul>
                </nav>
              </>
            ) : (
              <div class="no-vinyl">
                <div class="no-vinyl-icon">üìÄ</div>
                <h3>No hay vinilos disponibles</h3>
                <p>Los vinilos aparecer√°n aqu√≠ cuando sean publicados en WordPress.</p>
              </div>
            )}
          </div>
        </section>
      </>
    )}
  </div>
</MainLayout>

<style>
  /* Contenedor principal unificado */
  .main-content {
    background: linear-gradient(
      135deg,
      var(--color-bg) 0%,
      rgba(0, 0, 0, 0.02) 50%,
      var(--color-bg) 100%
    );
    min-height: 100vh;
    position: relative;
    overflow: hidden;
  }
  
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
    position: relative;
    z-index: 1;
  }
  
  .hero-container {
    padding: 4rem 1rem;
    min-height: 70vh;
    display: flex;
    align-items: center;
  }
  
  /* ===== ESTILOS PARA ERROR ===== */
  .error-container {
    text-align: center;
    width: 100%;
    padding: 2rem;
    background: #1a1a1a;
    border-radius: 15px;
    border: 2px solid var(--title-color);
    margin: 4rem auto;
    max-width: 600px;
  }
  
  .error-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
  }
  
  .error-title {
    color: var(--title-color);
    font-size: 2.5rem;
    margin-bottom: 1rem;
  }
  
  .error-message {
    color: #fff;
    font-size: 1.2rem;
    margin-bottom: 2rem;
    background: #333;
    padding: 1rem;
    border-radius: 8px;
    font-family: monospace;
  }
  
  .error-details {
    text-align: left;
    max-width: 500px;
    margin: 0 auto 2rem;
    background: #2a2a2a;
    padding: 1.5rem;
    border-radius: 8px;
  }
  
  .error-details h3 {
    color: var(--title-color);
    margin-bottom: 1rem;
  }
  
  .error-details ul {
    color: #ccc;
    list-style-position: inside;
  }
  
  .error-details li {
    margin-bottom: 0.5rem;
  }
  
  .error-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }
  
  .btn {
    display: inline-block;
    padding: 1rem 2rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 600;
    font-size: 1.1rem;
    transition: all 0.3s ease;
    border: 2px solid;
    cursor: pointer;
    text-align: center;
    min-width: 180px;
  }
  
  .primary-btn {
    background: var(--title-color);
    color: var(--color-bg);
    border-color: var(--title-color);
  }
  
  .primary-btn:hover {
    background: #a8935e;
    border-color: #a8935e;
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(197, 173, 123, 0.3);
  }
  
  .secondary-btn {
    background: transparent;
    color: var(--title-color);
    border-color: var(--title-color);
  }
  
  .secondary-btn:hover {
    background: var(--title-color);
    color: var(--color-bg);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(197, 173, 123, 0.3);
  }

/* ===== SECCI√ìN VINILOS ===== */
.vinyl-section {
  padding: 0;
  background: transparent;
  position: relative;
  z-index: 1;
  margin-top: -2rem;
}

.vinyl-section .container {
  padding: 4rem 1rem 6rem;
}

.section-header {
  text-align: left;
  margin-bottom: 3rem;
  position: relative;
}

.section-title-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 2rem;
  margin-bottom: 2rem;
  flex-wrap: wrap;
}

.section-header h2 {
  font-size: 3.2rem;
  margin: 0;
  color: var(--title-color);
  font-weight: 800;
  letter-spacing: -0.02em;
  line-height: 1.1;
  position: relative;
  display: inline-block;
  animation: titleSlideIn 1s ease-out;
}

/* === BUSCADOR === */
.search-form {
  display: flex;
  align-items: center;
}

.search-input-group {
  position: relative;
  display: flex;
  align-items: center;
  background: var(--color-card-bg);
  border: 2px solid rgba(197, 173, 123, 0.2);
  border-radius: 25px;
  overflow: hidden;
  transition: all 0.3s ease;
  min-width: 300px;
}

.search-input-group:focus-within {
  border-color: var(--title-color);
  box-shadow: 0 0 0 3px rgba(197, 173, 123, 0.1);
}

.search-input {
  background: transparent;
  border: none;
  padding: 0.8rem 1.2rem;
  color: #fff;
  font-size: 1rem;
  outline: none;
  flex: 1;
  min-width: 0;
}

.search-input::placeholder {
  color: #666;
}

.search-button {
  background: var(--title-color);
  border: none;
  padding: 0.8rem 1.2rem;
  color: white;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.search-button:hover {
  background: #a8935e;
  transform: scale(1.05);
}

.clear-search {
  background: rgba(197, 173, 123, 0.2);
  border: none;
  padding: 0.8rem;
  color: var(--title-color);
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  text-decoration: none;
  border-left: 1px solid rgba(197, 173, 123, 0.2);
}

.clear-search:hover {
  background: rgba(197, 173, 123, 0.3);
  color: #fff;
}

@keyframes titleSlideIn {
  0% { transform: translateX(-30px); opacity: 0; }
  100% { transform: translateX(0); opacity: 1; }
}

.section-header p {
  font-size: 1.3rem;
  color: #777;
  max-width: 800px;
  line-height: 1.6;
  margin: 2rem 0 0;
  animation: textFadeIn 1s ease-out 0.3s both;
}

@keyframes textFadeIn {
  0% { transform: translateY(20px); opacity: 0; }
  100% { transform: translateY(0); opacity: 1; }
}
.vinyl-grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr); /* 4 columnas desktop */
  gap: 1.5rem;
  margin-top: 2rem;
}
@media (max-width: 1200px) {
  .vinyl-grid {
    grid-template-columns: repeat(3, 1fr);
  }
}
@media (max-width: 900px) {
  .vinyl-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}
@media (max-width: 600px) {
  .vinyl-grid {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
}
.vinyl-card {
  background: var(--color-card-bg);
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
  transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  cursor: pointer;
  display: flex;
  flex-direction: column;
  position: relative;
  border: 1px solid rgba(197, 173, 123, 0.1);
  animation: cardSlideIn 0.6s ease-out both;
}

@keyframes cardSlideIn {
  0% { transform: translateY(30px) scale(0.9); opacity: 0; }
  100% { transform: translateY(0) scale(1); opacity: 1; }
}

/* Delays escalonados para efecto visual */
.vinyl-card:nth-child(1) { animation-delay: 0.1s; }
.vinyl-card:nth-child(2) { animation-delay: 0.15s; }
.vinyl-card:nth-child(3) { animation-delay: 0.2s; }
.vinyl-card:nth-child(4) { animation-delay: 0.25s; }
.vinyl-card:nth-child(5) { animation-delay: 0.3s; }
.vinyl-card:nth-child(6) { animation-delay: 0.35s; }
.vinyl-card:nth-child(7) { animation-delay: 0.4s; }
.vinyl-card:nth-child(8) { animation-delay: 0.45s; }
.vinyl-card:nth-child(9) { animation-delay: 0.5s; }
.vinyl-card:nth-child(10) { animation-delay: 0.55s; }
.vinyl-card:nth-child(11) { animation-delay: 0.6s; }
.vinyl-card:nth-child(12) { animation-delay: 0.65s; }
.vinyl-card:nth-child(13) { animation-delay: 0.7s; }
.vinyl-card:nth-child(14) { animation-delay: 0.75s; }
.vinyl-card:nth-child(15) { animation-delay: 0.8s; }
.vinyl-card:nth-child(16) { animation-delay: 0.85s; }
.vinyl-card:nth-child(17) { animation-delay: 0.9s; }
.vinyl-card:nth-child(18) { animation-delay: 0.95s; }
.vinyl-card:nth-child(19) { animation-delay: 1s; }
.vinyl-card:nth-child(20) { animation-delay: 1.05s; }
.vinyl-card:nth-child(21) { animation-delay: 1.1s; }
.vinyl-card:nth-child(22) { animation-delay: 1.15s; }
.vinyl-card:nth-child(23) { animation-delay: 1.2s; }
.vinyl-card:nth-child(24) { animation-delay: 1.25s; }

.vinyl-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(45deg, transparent 30%, rgba(197, 173, 123, 0.05) 50%, transparent 70%);
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
  z-index: 1;
}

.vinyl-card:hover {
  transform: translateY(-8px) scale(1.02);
  box-shadow: 0 12px 30px rgba(0, 0, 0, 0.25), 0 0 15px rgba(197, 173, 123, 0.2);
  border-color: rgba(197, 173, 123, 0.3);
}

.vinyl-card:hover::before {
  opacity: 1;
}
.vinyl-image {
  position: relative;
  aspect-ratio: 1 / 1;
  overflow: hidden;
  border-radius: 12px 12px 0 0;
}
.vinyl-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}
.vinyl-card:hover .vinyl-image img {
  transform: scale(1.05) rotate(2deg);
}
.vinyl-overlay {
  position: absolute;
  top: 0; left: 0; right: 0; bottom: 0;
  background: rgba(0,0,0,0.70);
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: opacity 0.3s ease;
}
.vinyl-card:hover .vinyl-overlay {
  opacity: 1;
}
.vinyl-link {
  background: linear-gradient(135deg, var(--title-color) 0%, #a8935e 100%);
  color: white;
  padding: 0.8rem 1.5rem;
  border-radius: 25px;
  text-decoration: none;
  font-weight: 600;
  transform: translateY(10px);
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(197, 173, 123, 0.4);
}
.vinyl-card:hover .vinyl-link {
  transform: translateY(0);
}
.vinyl-price {
  position: absolute;
  top: 1rem;
  right: 1rem;
}
.price-badge {
  background: linear-gradient(135deg, var(--title-color) 0%, #a8935e 100%);
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 20px;
  font-size: 0.9rem;
  font-weight: 700;
  box-shadow: 0 2px 10px rgba(197, 173, 123, 0.3);
}
.vinyl-info {
  padding: 1rem;
  text-align: center;
}
.vinyl-title-card {
  font-size: 1rem;
  font-weight: 700;
  color: var(--title-color);
  margin: 0;
  line-height: 1.3;
  transition: color 0.3s ease;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.vinyl-card:hover .vinyl-title-card {
  color: #a8935e;
}
.no-vinyl {
  text-align: center;
  padding: 4rem 2rem;
  color: #666;
}
.no-vinyl-icon {
  font-size: 4rem;
  margin-bottom: 1rem;
  opacity: 0.5;
}
.no-vinyl h3 {
  color: #fff;
  margin-bottom: 0.5rem;
}

/* ===== PAGINACI√ìN ===== */
.pagination {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 2rem;
  margin: 3rem 0 1.5rem 0;
}
.pagination-status {
  color: #888;
  font-size: 1rem;
}
@media (max-width: 700px) {
  .pagination {
    flex-direction: column;
    gap: 1rem;
  }
}

/* ===== ENLACES DE PAGINACI√ìN ===== */
.pagination ul {
  list-style: none;
  display: flex;
  gap: 0.6rem;
  padding: 0;
  margin: 0;
}
.pagination li {
  display: inline-block;
}
.pagination-link {
  display: inline-block;
  padding: 0.5rem 1.1rem;
  border-radius: 20px;
  background: var(--color-card-bg);
  color: var(--title-color);
  border: 2px solid var(--title-color);
  font-weight: 600;
  text-decoration: none;
  font-size: 1.1rem;
  transition: all 0.3s ease;
  box-shadow: 0 2px 8px rgba(197, 173, 123, 0.1);
  cursor: pointer;
}

.pagination-link:hover:not(.disabled):not(.current) {
  background: var(--title-color);
  color: #fff;
  border-color: var(--title-color);
  transform: translateY(-2px);
  box-shadow: 0 4px 15px rgba(197, 173, 123, 0.3);
}

.pagination-link.current {
  background: var(--title-color);
  color: #fff;
  border-color: var(--title-color);
  cursor: default;
  pointer-events: none;
}

.pagination-link.disabled {
  opacity: 0.4;
  cursor: not-allowed;
  color: #888;
  border-color: #555;
  background: #1a1a1a;
  pointer-events: none;
}

/* Responsive */
  @media (max-width: 768px) {
    .main-content {
      min-height: auto;
    }
    
    .hero-container {
      padding: 2rem 1rem;
      min-height: 60vh;
    }
    
    .vinyl-section {
      margin-top: -1rem;
    }
    
    .vinyl-section .container {
      padding: 2rem 1rem 4rem;
    }

    .error-title {
      font-size: 2rem;
    }
    
    .error-message {
      font-size: 1rem;
    }
    
    .section-header h2 {
      font-size: 2.5rem;
    }
    
    .section-header p {
      font-size: 1.1rem;
    }
    
    .section-title-row {
      flex-direction: column;
      align-items: flex-start;
      gap: 1.5rem;
    }
    
    .search-input-group {
      min-width: 100%;
      max-width: 400px;
    }
  }
  
  @media (max-width: 480px) {
    .error-title {
      font-size: 1.5rem;
    }
    
    .search-input-group {
      min-width: 250px;
    }
    
    .search-input {
      font-size: 0.9rem;
      padding: 0.7rem 1rem;
    }
    
    .search-button {
      padding: 0.7rem 1rem;
    }
  }

/* ===== SMOOTH SCROLL ===== */
html {
  scroll-behavior: smooth;
}

/* Indicador de carga para b√∫squedas */
.search-form.loading .search-input-group {
  opacity: 0.7;
  pointer-events: none;
}

.search-form.loading .search-button svg {
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}
</style>

<script>
  // Agregar indicador de carga al enviar el formulario
  document.addEventListener('DOMContentLoaded', () => {
    const searchForm = document.getElementById('searchForm');
    if (searchForm) {
      searchForm.addEventListener('submit', (e) => {
        const searchInput = searchForm.querySelector('.search-input');
        if (searchInput && searchInput.value.trim()) {
          searchForm.classList.add('loading');
          // Cambiar el texto del bot√≥n temporalmente
          const searchButton = searchForm.querySelector('.search-button');
          if (searchButton) {
            searchButton.innerHTML = `
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                <path d="M12 2v4m0 12v4m10-10h-4M6 12H2m15.364 6.364l-2.828-2.828M8.464 8.464L5.636 5.636m12.728 0l-2.828 2.828m-7.072 7.072l-2.828 2.828" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
              </svg>
            `;
          }
        }
      });
    }
  });
</script>
