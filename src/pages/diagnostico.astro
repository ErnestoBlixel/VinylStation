---
// P√°gina de diagn√≥stico temporal para verificar variables de entorno
const env = {
  PUBLIC_WORDPRESS_API_URL: import.meta.env.PUBLIC_WORDPRESS_API_URL || 'NO DEFINIDA',
  PUBLIC_WORDPRESS_GRAPHQL_URL: import.meta.env.PUBLIC_WORDPRESS_GRAPHQL_URL || 'NO DEFINIDA',
  MODE: import.meta.env.MODE,
  PROD: import.meta.env.PROD,
  SSR: import.meta.env.SSR
};

const restUrl = import.meta.env.PUBLIC_WORDPRESS_API_URL || 'https://cms.vinylstation.es/wp-json';
const graphqlUrl = import.meta.env.PUBLIC_WORDPRESS_GRAPHQL_URL || 'https://cms.vinylstation.es/graphql';
const currentUrl = Astro.url.toString();
const currentHost = Astro.url.host;
const currentProtocol = Astro.url.protocol;
---

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Diagn√≥stico - VinylStation</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
            background: #1a1a1a;
            color: white;
        }
        .section {
            margin: 20px 0;
            padding: 20px;
            border: 1px solid #333;
            border-radius: 8px;
            background: #2a2a2a;
        }
        h1 { color: #ff3333; }
        h2 { color: #ff6b6b; }
        .success { color: #4caf50; }
        .error { color: #f44336; }
        pre {
            background: #000;
            padding: 15px;
            overflow-x: auto;
            border-radius: 5px;
        }
        button {
            background: #ff3333;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            margin: 5px;
        }
        button:hover {
            background: #cc2222;
        }
    </style>
</head>
<body>
    <h1>üîç Diagn√≥stico de Variables de Entorno</h1>
    
    <div class="section">
        <h2>1. Variables de Entorno del Servidor</h2>
        <pre id="server-env">{JSON.stringify(env, null, 2)}</pre>
    </div>
    
    <div class="section">
        <h2>2. URLs Configuradas</h2>
        <div id="urls">
            <p><strong>API REST:</strong> <span id="rest-url">{restUrl}</span></p>
            <p><strong>GraphQL:</strong> <span id="graphql-url">{graphqlUrl}</span></p>
        </div>
    </div>
    
    <div class="section">
        <h2>3. Test de Conectividad</h2>
        <button onclick="testREST()">Probar API REST</button>
        <button onclick="testGraphQL()">Probar GraphQL</button>
        <div id="test-results"></div>
    </div>
    
    <div class="section">
        <h2>4. Informaci√≥n del Entorno</h2>
        <div id="env-info">
            <p><strong>URL actual:</strong> {currentUrl}</p>
            <p><strong>Host:</strong> {currentHost}</p>
            <p><strong>Protocolo:</strong> {currentProtocol}</p>
        </div>
    </div>

    <script define:vars={{ restUrl, graphqlUrl }}>
        const REST_URL = restUrl;
        const GRAPHQL_URL = graphqlUrl;
        
        async function testREST() {
            const resultsDiv = document.getElementById('test-results');
            resultsDiv.innerHTML = '<p>Probando API REST...</p>';
            
            try {
                const response = await fetch(REST_URL);
                const data = await response.json();
                
                resultsDiv.innerHTML = `
                    <h3 class="success">‚úÖ API REST funciona</h3>
                    <p>Status: ${response.status}</p>
                    <pre>${JSON.stringify(data, null, 2).substring(0, 500)}...</pre>
                `;
            } catch (error) {
                resultsDiv.innerHTML = `
                    <h3 class="error">‚ùå Error en API REST</h3>
                    <p>${error.message}</p>
                `;
            }
        }
        
        async function testGraphQL() {
            const resultsDiv = document.getElementById('test-results');
            resultsDiv.innerHTML = '<p>Probando GraphQL...</p>';
            
            const query = `
                query TestConnection {
                    generalSettings {
                        title
                        description
                    }
                }
            `;
            
            try {
                const response = await fetch(GRAPHQL_URL, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query })
                });
                
                const data = await response.json();
                
                resultsDiv.innerHTML = `
                    <h3 class="success">‚úÖ GraphQL funciona</h3>
                    <p>Status: ${response.status}</p>
                    <pre>${JSON.stringify(data, null, 2)}</pre>
                `;
            } catch (error) {
                resultsDiv.innerHTML = `
                    <h3 class="error">‚ùå Error en GraphQL</h3>
                    <p>${error.message}</p>
                `;
            }
        }
        
        // Hacer las funciones globales
        window.testREST = testREST;
        window.testGraphQL = testGraphQL;
    </script>
</body>
</html>
