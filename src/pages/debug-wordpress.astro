---
// Test de diagn√≥stico de WordPress directo
const GRAPHQL_URL = import.meta.env.PUBLIC_WORDPRESS_GRAPHQL_URL || 'https://cms.vinylstation.es/graphql';

let responses = {};
let errorDetails = {};

// Test 1: Verificar qu√© devuelve WordPress exactamente
async function testWordPressResponse() {
  const tests = [
    {
      name: 'GET request a GraphQL',
      config: {
        method: 'GET',
        url: GRAPHQL_URL
      }
    },
    {
      name: 'POST sin query',
      config: {
        method: 'POST',
        url: GRAPHQL_URL,
        headers: { 'Content-Type': 'application/json' },
        body: '{}'
      }
    },
    {
      name: 'POST con query simple',
      config: {
        method: 'POST',
        url: GRAPHQL_URL,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          query: 'query { __typename }'
        })
      }
    },
    {
      name: 'POST con headers adicionales',
      config: {
        method: 'POST',
        url: GRAPHQL_URL,
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest',
          'Origin': 'https://cb97ed2a.vinylstation.pages.dev'
        },
        body: JSON.stringify({
          query: 'query { __typename }'
        })
      }
    }
  ];

  for (const test of tests) {
    try {
      console.log(`üîç Testing: ${test.name}`);
      
      const response = await fetch(test.config.url, {
        method: test.config.method,
        headers: test.config.headers || {},
        body: test.config.body || undefined
      });
      
      const contentType = response.headers.get('Content-Type') || 'unknown';
      let responseText = '';
      
      try {
        responseText = await response.text();
      } catch (e) {
        responseText = 'Error reading response text';
      }
      
      responses[test.name] = {
        status: response.status,
        statusText: response.statusText,
        contentType,
        headers: Object.fromEntries(response.headers.entries()),
        bodyPreview: responseText.substring(0, 500),
        isJSON: contentType.includes('application/json'),
        isHTML: responseText.trim().startsWith('<!DOCTYPE') || responseText.includes('<html>')
      };
      
      console.log(`‚úÖ ${test.name}: ${response.status} ${response.statusText}`);
      
    } catch (error) {
      console.error(`‚ùå ${test.name}:`, error.message);
      errorDetails[test.name] = {
        message: error.message,
        name: error.name
      };
    }
  }
}

// Test 2: Verificar endpoint REST API
async function testRestAPI() {
  try {
    const restUrl = 'https://cms.vinylstation.es/wp-json';
    const response = await fetch(restUrl);
    const data = await response.json();
    
    responses['REST API'] = {
      status: response.status,
      working: response.status === 200,
      data: data
    };
    
  } catch (error) {
    errorDetails['REST API'] = {
      message: error.message
    };
  }
}

// Ejecutar todos los tests
await testWordPressResponse();
await testRestAPI();
---

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Diagn√≥stico WordPress - VinylStation</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 50px auto;
            padding: 20px;
            background: #1a1a1a;
            color: white;
        }
        pre {
            background: #000;
            padding: 15px;
            overflow-x: auto;
            border-radius: 5px;
            font-size: 11px;
            white-space: pre-wrap;
        }
        .error { color: #f44336; }
        .success { color: #4caf50; }
        .warning { color: #ff9800; }
        .info { color: #2196f3; }
        .section {
            margin: 20px 0;
            padding: 20px;
            border: 1px solid #333;
            border-radius: 8px;
            background: #2a2a2a;
        }
        .response-item {
            margin: 10px 0;
            padding: 15px;
            border: 1px solid #555;
            border-radius: 5px;
            background: #1a1a1a;
        }
        .status-200 { border-left: 4px solid #4caf50; }
        .status-403 { border-left: 4px solid #f44336; }
        .status-other { border-left: 4px solid #ff9800; }
    </style>
</head>
<body>
    <h1>üîç Diagn√≥stico WordPress CORS/GraphQL</h1>
    
    <div class="section">
        <h2>üì° Tests de Conectividad</h2>
        
        {Object.entries(responses).map(([testName, result]) => (
          <div class={`response-item status-${result.status === 200 ? '200' : result.status === 403 ? '403' : 'other'}`}>
            <h3>{testName}</h3>
            <p><strong>Status:</strong> <span class={result.status === 200 ? 'success' : 'error'}>{result.status} {result.statusText}</span></p>
            
            {result.contentType && (
              <p><strong>Content-Type:</strong> {result.contentType}</p>
            )}
            
            {result.isHTML && (
              <p class="error">‚ùå WordPress devolvi√≥ HTML (p√°gina de error)</p>
            )}
            
            {result.isJSON && (
              <p class="success">‚úÖ WordPress devolvi√≥ JSON</p>
            )}
            
            {result.bodyPreview && (
              <details>
                <summary>Ver respuesta (primeros 500 chars)</summary>
                <pre>{result.bodyPreview}</pre>
              </details>
            )}
            
            {result.headers && (
              <details>
                <summary>Ver headers de respuesta</summary>
                <pre>{JSON.stringify(result.headers, null, 2)}</pre>
              </details>
            )}
          </div>
        ))}
    </div>
    
    {Object.keys(errorDetails).length > 0 && (
      <div class="section">
        <h2 class="error">‚ùå Errores de Conectividad</h2>
        <pre>{JSON.stringify(errorDetails, null, 2)}</pre>
      </div>
    )}
    
    <div class="section">
        <h2>üí° Posibles Soluciones</h2>
        <ul>
          <li><strong>Si todos devuelven 403:</strong> Problema de CORS, necesitas configurar WordPress</li>
          <li><strong>Si devuelven HTML:</strong> WPGraphQL plugin desactivado o mal configurado</li>
          <li><strong>Si REST API funciona pero GraphQL no:</strong> Plugin WPGraphQL no instalado</li>
          <li><strong>Si ninguno funciona:</strong> Firewall o proxy bloqueando requests</li>
        </ul>
    </div>
    
    <div class="section">
        <h2>üîß Variables de Entorno</h2>
        <pre>{JSON.stringify({
          PUBLIC_WORDPRESS_API_URL: import.meta.env.PUBLIC_WORDPRESS_API_URL,
          PUBLIC_WORDPRESS_GRAPHQL_URL: import.meta.env.PUBLIC_WORDPRESS_GRAPHQL_URL,
          MODE: import.meta.env.MODE,
          PROD: import.meta.env.PROD
        }, null, 2)}</pre>
    </div>
</body>
</html>
