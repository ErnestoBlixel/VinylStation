---
// RadioPlayer minimalista y profesional para VinylStation
import { getEmisora } from '../lib/wordpress';

const emisora = await getEmisora();
const STREAM_URL = emisora?.camposEmisora?.vsMp3StreamUrl || 'https://stream.zeno.fm/4g7qxnxrloluv';
---

<div class="radio-player-minimal">
  <audio id="radio-audio" preload="none" data-stream-url={STREAM_URL}></audio>
  
  <div class="player-controls">
    <button id="play-pause" class="play-button" aria-label="Reproducir/Pausar">
      <svg id="play-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polygon points="5,3 19,12 5,21"></polygon>
      </svg>
      <svg id="pause-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="display: none;">
        <rect x="6" y="4" width="4" height="16"></rect>
        <rect x="14" y="4" width="4" height="16"></rect>
      </svg>
    </button>
    
    <div class="status-info">
      <span id="status-text">Radio en vivo</span>
      <div id="loading-indicator" class="loading-dot" style="display: none;"></div>
    </div>
    
    <div class="volume-control">
      <button id="volume-toggle" class="volume-button" aria-label="Silenciar/Activar sonido">
        <svg id="volume-on" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polygon points="11,5 6,9 2,9 2,15 6,15 11,19"></polygon>
          <path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"></path>
        </svg>
        <svg id="volume-off" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="display: none;">
          <polygon points="11,5 6,9 2,9 2,15 6,15 11,19"></polygon>
          <line x1="23" y1="9" x2="17" y2="15"></line>
          <line x1="17" y1="9" x2="23" y2="15"></line>
        </svg>
      </button>
      <input type="range" id="volume-slider" class="volume-slider" min="0" max="1" step="0.1" value="0.7">
    </div>
  </div>
</div>

<script>
  class MinimalRadioPlayer {
    constructor() {
      this.audio = document.getElementById('radio-audio');
      this.playPauseBtn = document.getElementById('play-pause');
      this.playIcon = document.getElementById('play-icon');
      this.pauseIcon = document.getElementById('pause-icon');
      this.statusText = document.getElementById('status-text');
      this.loadingIndicator = document.getElementById('loading-indicator');
      this.volumeToggle = document.getElementById('volume-toggle');
      this.volumeOnIcon = document.getElementById('volume-on');
      this.volumeOffIcon = document.getElementById('volume-off');
      this.volumeSlider = document.getElementById('volume-slider');
      
      this.isPlaying = false;
      this.isLoading = false;
      
      this.init();
    }
    
    init() {
      const streamUrl = this.audio.getAttribute('data-stream-url');
      this.audio.src = streamUrl;
      this.audio.volume = parseFloat(this.volumeSlider.value);
      
      this.bindEvents();
    }
    
    bindEvents() {
      // Play/Pause
      this.playPauseBtn.addEventListener('click', () => this.togglePlayPause());
      
      // Volume
      this.volumeToggle.addEventListener('click', () => this.toggleMute());
      this.volumeSlider.addEventListener('input', (e) => this.updateVolume(e.target.value));
      
      // Audio events
      this.audio.addEventListener('loadstart', () => this.setLoading(true));
      this.audio.addEventListener('canplay', () => this.setLoading(false));
      this.audio.addEventListener('play', () => this.setPlaying(true));
      this.audio.addEventListener('pause', () => this.setPlaying(false));
      this.audio.addEventListener('error', () => this.handleError());
      this.audio.addEventListener('stalled', () => this.setLoading(true));
      this.audio.addEventListener('waiting', () => this.setLoading(true));
      this.audio.addEventListener('playing', () => this.setLoading(false));
    }
    
    togglePlayPause() {
      if (this.isPlaying) {
        this.audio.pause();
      } else {
        this.audio.play().catch(() => this.handleError());
      }
    }
    
    setPlaying(playing) {
      this.isPlaying = playing;
      
      if (playing) {
        this.playIcon.style.display = 'none';
        this.pauseIcon.style.display = 'block';
        this.statusText.textContent = 'En vivo';
        this.playPauseBtn.classList.add('playing');
      } else {
        this.playIcon.style.display = 'block';
        this.pauseIcon.style.display = 'none';
        this.statusText.textContent = 'Radio en vivo';
        this.playPauseBtn.classList.remove('playing');
      }
    }
    
    setLoading(loading) {
      this.isLoading = loading;
      
      if (loading) {
        this.loadingIndicator.style.display = 'block';
        this.statusText.textContent = 'Conectando...';
      } else {
        this.loadingIndicator.style.display = 'none';
        if (this.isPlaying) {
          this.statusText.textContent = 'En vivo';
        }
      }
    }
    
    toggleMute() {
      this.audio.muted = !this.audio.muted;
      
      if (this.audio.muted) {
        this.volumeOnIcon.style.display = 'none';
        this.volumeOffIcon.style.display = 'block';
      } else {
        this.volumeOnIcon.style.display = 'block';
        this.volumeOffIcon.style.display = 'none';
      }
    }
    
    updateVolume(value) {
      this.audio.volume = parseFloat(value);
      this.audio.muted = value == 0;
      
      if (value == 0) {
        this.volumeOnIcon.style.display = 'none';
        this.volumeOffIcon.style.display = 'block';
      } else {
        this.volumeOnIcon.style.display = 'block';
        this.volumeOffIcon.style.display = 'none';
      }
    }
    
    handleError() {
      this.setLoading(false);
      this.setPlaying(false);
      this.statusText.textContent = 'Error de conexión';
      
      // Reintentar después de 3 segundos
      setTimeout(() => {
        this.statusText.textContent = 'Radio en vivo';
      }, 3000);
    }
  }
  
  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new MinimalRadioPlayer());
  } else {
    new MinimalRadioPlayer();
  }
</script>

<style>
  .radio-player-minimal {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    padding: 12px 16px;
    min-width: 280px;
    max-width: 320px;
  }
  
  .player-controls {
    display: flex;
    align-items: center;
    gap: 12px;
  }
  
  .play-button {
    background: var(--color-primary, #ff3333);
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    color: white;
  }
  
  .play-button:hover {
    background: var(--color-secondary, #bb2424);
    transform: scale(1.05);
  }
  
  .play-button.playing {
    background: var(--color-secondary, #bb2424);
  }
  
  .status-info {
    flex: 1;
    display: flex;
    align-items: center;
    gap: 8px;
    min-width: 0;
  }
  
  #status-text {
    font-size: 14px;
    font-weight: 500;
    color: var(--color-text, #ffffff);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .loading-dot {
    width: 6px;
    height: 6px;
    background: var(--color-primary, #ff3333);
    border-radius: 50%;
    animation: pulse 1.5s infinite;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 0.4; transform: scale(1); }
    50% { opacity: 1; transform: scale(1.2); }
  }
  
  .volume-control {
    display: flex;
    align-items: center;
    gap: 8px;
  }
  
  .volume-button {
    background: none;
    border: none;
    color: var(--color-text, #ffffff);
    cursor: pointer;
    padding: 4px;
    border-radius: 4px;
    transition: all 0.2s ease;
    opacity: 0.7;
  }
  
  .volume-button:hover {
    opacity: 1;
    background: rgba(255, 255, 255, 0.1);
  }
  
  .volume-slider {
    width: 60px;
    height: 4px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 2px;
    outline: none;
    cursor: pointer;
    -webkit-appearance: none;
  }
  
  .volume-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 14px;
    height: 14px;
    background: var(--color-primary, #ff3333);
    border-radius: 50%;
    cursor: pointer;
    transition: transform 0.2s ease;
  }
  
  .volume-slider::-webkit-slider-thumb:hover {
    transform: scale(1.2);
  }
  
  .volume-slider::-moz-range-thumb {
    width: 14px;
    height: 14px;
    background: var(--color-primary, #ff3333);
    border-radius: 50%;
    border: none;
    cursor: pointer;
  }
  
  /* Responsive */
  @media (max-width: 480px) {
    .radio-player-minimal {
      min-width: 240px;
      padding: 10px 12px;
    }
    
    .volume-slider {
      width: 50px;
    }
    
    #status-text {
      font-size: 13px;
    }
  }
</style>