---
// RadioPlayer con el estilo del hero para VinylStation
import { getEmisora } from '../lib/wordpress';

const emisora = await getEmisora();
const STREAM_URL = emisora?.camposEmisora?.vsMp3StreamUrl || 'https://stream.zeno.fm/4g7qxnxrloluv';
---

<div class="radio-player-header">
  <audio id="radio-audio" preload="none" crossorigin="anonymous">
    <source src={STREAM_URL} type="audio/mpeg">
    Tu navegador no soporta audio HTML5.
  </audio>
  
  <div class="player-controls">
    <button id="play-pause" class="play-button" aria-label="Reproducir/Pausar">
      <svg id="play-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polygon points="5,3 19,12 5,21"></polygon>
      </svg>
      <svg id="pause-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="display: none;">
        <rect x="6" y="4" width="4" height="16"></rect>
        <rect x="14" y="4" width="4" height="16"></rect>
      </svg>
    </button>
    
    <div class="status-info">
      <span id="status-text">Radio en vivo</span>
      <div id="loading-indicator" class="loading-dot" style="display: none;"></div>
    </div>
    
    <div class="volume-control">
      <button id="volume-toggle" class="volume-button" aria-label="Silenciar/Activar sonido">
        <svg id="volume-on" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polygon points="11,5 6,9 2,9 2,15 6,15 11,19"></polygon>
          <path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"></path>
        </svg>
        <svg id="volume-off" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="display: none;">
          <polygon points="11,5 6,9 2,9 2,15 6,15 11,19"></polygon>
          <line x1="23" y1="9" x2="17" y2="15"></line>
          <line x1="17" y1="9" x2="23" y2="15"></line>
        </svg>
      </button>
      <input type="range" id="volume-slider" class="volume-slider" min="0" max="1" step="0.1" value="0.7">
    </div>
  </div>
</div>

<script>
  class HeaderRadioPlayer {
    constructor() {
      this.audio = document.getElementById('radio-audio');
      this.playPauseBtn = document.getElementById('play-pause');
      this.playIcon = document.getElementById('play-icon');
      this.pauseIcon = document.getElementById('pause-icon');
      this.statusText = document.getElementById('status-text');
      this.loadingIndicator = document.getElementById('loading-indicator');
      this.volumeToggle = document.getElementById('volume-toggle');
      this.volumeOnIcon = document.getElementById('volume-on');
      this.volumeOffIcon = document.getElementById('volume-off');
      this.volumeSlider = document.getElementById('volume-slider');
      
      this.isPlaying = false;
      this.isLoading = false;
      
      this.init();
    }
    
    init() {
      if (!this.audio || !this.playPauseBtn) {
        console.log('Elementos del reproductor header no encontrados');
        return;
      }
      
      // Configurar volumen inicial
      this.audio.volume = parseFloat(this.volumeSlider?.value || 0.7);
      
      this.bindEvents();
      
      // Esperar a que el RadioStateManager esté listo
      this.waitForStateManager();
      
      console.log('Reproductor header inicializado');
    }
    
    // Esperar a que el state manager esté disponible
    waitForStateManager() {
      const checkStateManager = () => {
        if (window.radioStateManager) {
          console.log('State manager detectado en header, sincronizando...');
          // El state manager ya manejará este reproductor automáticamente
          this.syncWithStateManager();
        } else {
          setTimeout(checkStateManager, 100);
        }
      };
      checkStateManager();
    }
    
    // Sincronizar con el state manager
    syncWithStateManager() {
      if (window.radioStateManager) {
        const state = window.radioStateManager.getState();
        this.isPlaying = state.isPlaying;
        this.updateUI();
      }
    }
    
    bindEvents() {
      // Play/Pause - ahora delega al state manager
      this.playPauseBtn?.addEventListener('click', () => this.togglePlayPause());
      
      // Volume
      this.volumeToggle?.addEventListener('click', () => this.toggleMute());
      this.volumeSlider?.addEventListener('input', (e) => this.updateVolume(e.target.value));
      
      // Los eventos de audio ya los maneja el state manager
      // Solo necesitamos eventos locales para UI
    }
    
    togglePlayPause() {
      // Usar el state manager para controlar la reproducción
      if (window.radioStateManager) {
        window.radioStateManager.togglePlayPause();
      } else {
        // Fallback si el state manager no está disponible
        this.fallbackToggle();
      }
    }
    
    // Método fallback por si no está disponible el state manager
    fallbackToggle() {
      if (!this.audio) {
        console.error('Audio element no disponible');
        return;
      }
      
      if (this.isPlaying) {
        this.audio.pause();
        console.log('Audio pausado (fallback)');
      } else {
        console.log('Intentando reproducir audio (fallback)...');
        if (!this.audio.src) {
          this.audio.src = 'https://stream.zeno.fm/4g7qxnxrloluv';
        }
        
        this.audio.play()
          .then(() => {
            console.log('Audio reproduciéndose correctamente (fallback)');
          })
          .catch((error) => {
            console.error('Error al reproducir:', error);
            this.handleError();
          });
      }
    }
    
    // Actualizar UI local
    updateUI() {
      if (this.isPlaying) {
        if (this.playIcon) this.playIcon.style.display = 'none';
        if (this.pauseIcon) this.pauseIcon.style.display = 'block';
        if (this.statusText) this.statusText.textContent = 'En vivo';
        this.playPauseBtn?.classList.add('playing');
      } else {
        if (this.playIcon) this.playIcon.style.display = 'block';
        if (this.pauseIcon) this.pauseIcon.style.display = 'none';
        if (this.statusText) this.statusText.textContent = 'Radio en vivo';
        this.playPauseBtn?.classList.remove('playing');
      }
    }
    
    setPlaying(playing) {
      this.isPlaying = playing;
      
      if (playing) {
        if (this.playIcon) this.playIcon.style.display = 'none';
        if (this.pauseIcon) this.pauseIcon.style.display = 'block';
        if (this.statusText) this.statusText.textContent = 'En vivo';
        this.playPauseBtn?.classList.add('playing');
      } else {
        if (this.playIcon) this.playIcon.style.display = 'block';
        if (this.pauseIcon) this.pauseIcon.style.display = 'none';
        if (this.statusText) this.statusText.textContent = 'Radio en vivo';
        this.playPauseBtn?.classList.remove('playing');
      }
    }
    
    setLoading(loading) {
      this.isLoading = loading;
      
      if (loading) {
        if (this.loadingIndicator) this.loadingIndicator.style.display = 'block';
        if (this.statusText) this.statusText.textContent = 'Conectando...';
      } else {
        if (this.loadingIndicator) this.loadingIndicator.style.display = 'none';
        if (this.isPlaying && this.statusText) {
          this.statusText.textContent = 'En vivo';
        }
      }
    }
    
    toggleMute() {
      if (!this.audio) return;
      
      this.audio.muted = !this.audio.muted;
      
      if (this.audio.muted) {
        if (this.volumeOnIcon) this.volumeOnIcon.style.display = 'none';
        if (this.volumeOffIcon) this.volumeOffIcon.style.display = 'block';
      } else {
        if (this.volumeOnIcon) this.volumeOnIcon.style.display = 'block';
        if (this.volumeOffIcon) this.volumeOffIcon.style.display = 'none';
      }
    }
    
    updateVolume(value) {
      if (!this.audio) return;
      
      this.audio.volume = parseFloat(value);
      this.audio.muted = value == 0;
      
      if (value == 0) {
        if (this.volumeOnIcon) this.volumeOnIcon.style.display = 'none';
        if (this.volumeOffIcon) this.volumeOffIcon.style.display = 'block';
      } else {
        if (this.volumeOnIcon) this.volumeOnIcon.style.display = 'block';
        if (this.volumeOffIcon) this.volumeOffIcon.style.display = 'none';
      }
    }
    
    handleError() {
      console.error('Error en el reproductor de audio');
      this.setLoading(false);
      this.setPlaying(false);
      if (this.statusText) this.statusText.textContent = 'Error de conexión';
      
      // Reintentar después de 3 segundos
      setTimeout(() => {
        if (this.statusText) this.statusText.textContent = 'Radio en vivo';
        console.log('Reintentando conexión...');
      }, 3000);
    }
  }
  
  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new HeaderRadioPlayer());
  } else {
    new HeaderRadioPlayer();
  }
</script>

<style>
  /* === REPRODUCTOR HEADER CON ESTILO DEL HERO === */
  .radio-player-header {
    max-width: 320px;
    margin: 0 auto;
    background: linear-gradient(135deg, rgba(197, 173, 123, 0.15) 0%, rgba(197, 173, 123, 0.08) 100%);
    backdrop-filter: blur(10px);
    border: 2px solid rgba(197, 173, 123, 0.4);
    border-radius: 12px;
    padding: 16px 20px;
    box-shadow: 0 8px 25px rgba(197, 173, 123, 0.3);
  }
  
  .player-controls {
    display: flex;
    align-items: center;
    gap: 12px;
  }
  
  .play-button {
    background: var(--title-color); /* Color dorado de los encabezados */
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    color: white;
  }
  
  .play-button:hover {
    background: #a8935e; /* Dorado más oscuro */
    transform: scale(1.05);
  }
  
  .play-button.playing {
    background: #a8935e; /* Dorado más oscuro */
  }
  
  .status-info {
    flex: 1;
    display: flex;
    align-items: center;
    gap: 8px;
    min-width: 0;
  }
  
  #status-text {
    font-size: 14px;
    font-weight: 600;
    color: var(--title-color); /* Color dorado de los encabezados */
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
  }
  
  .loading-dot {
    width: 6px;
    height: 6px;
    background: var(--title-color); /* Color dorado de los encabezados */
    border-radius: 50%;
    animation: pulse 1.5s infinite;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 0.4; transform: scale(1); }
    50% { opacity: 1; transform: scale(1.2); }
  }
  
  .volume-control {
    display: flex;
    align-items: center;
    gap: 8px;
  }
  
  .volume-button {
    background: none;
    border: none;
    color: var(--title-color); /* Color dorado de los encabezados */
    cursor: pointer;
    padding: 4px;
    border-radius: 4px;
    transition: all 0.2s ease;
    opacity: 0.9;
  }
  
  .volume-button:hover {
    opacity: 1;
    background: rgba(197, 173, 123, 0.2);
    color: var(--title-color);
  }
  
  .volume-slider {
    width: 60px;
    height: 4px;
    background: rgba(197, 173, 123, 0.4); /* Marco dorado más visible */
    border-radius: 2px;
    outline: none;
    cursor: pointer;
    -webkit-appearance: none;
  }
  
  .volume-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 14px;
    height: 14px;
    background: var(--title-color); /* Color dorado de los encabezados */
    border-radius: 50%;
    cursor: pointer;
    transition: transform 0.2s ease;
  }
  
  .volume-slider::-webkit-slider-thumb:hover {
    transform: scale(1.2);
  }
  
  .volume-slider::-moz-range-thumb {
    width: 14px;
    height: 14px;
    background: var(--title-color); /* Color dorado de los encabezados */
    border-radius: 50%;
    border: none;
    cursor: pointer;
  }
  
  /* === RESPONSIVE === */
  @media (max-width: 768px) {
    .radio-player-header {
      max-width: 280px;
      padding: 14px 18px;
    }
    
    .volume-slider {
      width: 50px;
    }
    
    #status-text {
      font-size: 13px;
    }
  }
  
  @media (max-width: 480px) {
    .radio-player-header {
      max-width: 240px;
      padding: 12px 16px;
    }
    
    .volume-slider {
      width: 45px;
    }
    
    #status-text {
      font-size: 12px;
    }
  }
</style>