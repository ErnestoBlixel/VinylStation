---
// CustomRadioPlayer - Un reproductor altamente personalizable que extrae metadatos
import { getEmisora } from '../lib/wordpress';

// URL del stream
const STREAM_URL = 'https://stream.zeno.fm/4g7qxnxrloluv';
const emisora = await getEmisora();
const RADIO_TITLE = emisora?.title || 'Vinyl Station Radio';
---

<div class="custom-radio-player">
  <div class="radio-now-playing">
    <div class="radio-album-art" id="album-art">
      <div class="default-album-art">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><circle cx="12" cy="12" r="3"></circle></svg>
      </div>
    </div>
    <div class="radio-info">
      <div class="radio-status">
        <span id="station-name">{RADIO_TITLE}</span>
        <div class="live-indicator">
          <span class="live-dot"></span>
          <span class="live-text">EN VIVO</span>
        </div>
      </div>
      <div class="track-info">
        <div class="track-title-wrapper">
          <span class="track-title" id="track-title">Cargando...</span>
        </div>
        <div class="track-artist-wrapper">
          <span class="track-artist" id="track-artist"></span>
        </div>
      </div>
    </div>
  </div>
  
  <div class="radio-controls">
    <button id="play-pause" class="control-button play-pause">
      <svg class="play-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="5 3 19 12 5 21 5 3"></polygon></svg>
      <svg class="pause-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="6" y="4" width="4" height="16"></rect><rect x="14" y="4" width="4" height="16"></rect></svg>
    </button>
    
    <div class="volume-container">
      <button id="mute-unmute" class="control-button volume-button">
        <svg class="volume-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><path d="M15.54 8.46a5 5 0 0 1 0 7.07"></path><path d="M19.07 4.93a10 10 0 0 1 0 14.14"></path></svg>
        <svg class="mute-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><line x1="23" y1="9" x2="17" y2="15"></line><line x1="17" y1="9" x2="23" y2="15"></line></svg>
      </button>
      <div class="volume-slider-container">
        <input type="range" id="volume-slider" min="0" max="100" value="80" class="volume-slider">
      </div>
    </div>
  </div>
</div>

<!-- Incluir Amplitude.js - versión reducida solo para streaming -->
<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/amplitude/8.18.6/amplitude.min.js"></script>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Inicializando reproductor personalizado');
    
    // Elementos del reproductor
    const playPauseButton = document.getElementById('play-pause');
    const muteButton = document.getElementById('mute-unmute');
    const volumeSlider = document.getElementById('volume-slider');
    const trackTitle = document.getElementById('track-title');
    const trackArtist = document.getElementById('track-artist');
    const albumArt = document.getElementById('album-art');
    const stationName = document.getElementById('station-name');
    const liveIndicator = document.querySelector('.live-dot');
    
    // URLs para la actualización de metadatos
    const streamURL = 'https://stream.zeno.fm/4g7qxnxrloluv';
    const metadataProxyURL = 'https://streamproxy.servemp3.com/metadata/zenoLookup.php?url=4g7qxnxrloluv';
    
    // Variables de estado
    let isPlaying = false;
    let isMuted = false;
    let metadataCheckInterval;
    let currentTitle = '';
    let currentArtist = '';
    let lastMetadataFetch = 0;
    
    // Inicializar Amplitude.js
    Amplitude.init({
      songs: [
        {
          name: "Transmisión en vivo",
          artist: "Vinyl Station Radio",
          url: streamURL,
          live: true
        }
      ],
      volume: 80,
      callbacks: {
        play: function() {
          console.log('Amplitude: Reproducción iniciada');
          isPlaying = true;
          playPauseButton.classList.add('playing');
          liveIndicator.classList.add('active');
          startMetadataCheck();
        },
        pause: function() {
          console.log('Amplitude: Reproducción pausada');
          isPlaying = false;
          playPauseButton.classList.remove('playing');
          liveIndicator.classList.remove('active');
          stopMetadataCheck();
        },
        volumechange: function() {
          const newVolume = Amplitude.getVolume();
          volumeSlider.value = newVolume * 100;
          
          if (newVolume === 0) {
            muteButton.classList.add('muted');
            isMuted = true;
          } else {
            muteButton.classList.remove('muted');
            isMuted = false;
          }
        }
      }
    });
    
    // Función para actualizar metadatos
    async function updateMetadata() {
      try {
        const now = Date.now();
        // Limitar las solicitudes a una cada 10 segundos para evitar sobrecargar
        if (now - lastMetadataFetch < 10000) return;
        
        lastMetadataFetch = now;
        
        // Intentar obtener metadatos usando un proxy para Zeno.FM
        const response = await fetch(metadataProxyURL);
        if (!response.ok) throw new Error('No se pudieron obtener metadatos');
        
        const data = await response.json();
        console.log('Metadatos obtenidos:', data);
        
        if (data && data.metadata) {
          // Extraer título y artista del formato común "Artista - Título"
          let title = data.metadata;
          let artist = '';
          
          if (data.metadata.includes(' - ')) {
            const parts = data.metadata.split(' - ');
            artist = parts[0].trim();
            title = parts[1].trim();
          }
          
          // Solo actualizar si hay cambios
          if (title !== currentTitle || artist !== currentArtist) {
            currentTitle = title;
            currentArtist = artist;
            
            // Actualizar interfaz
            if (title) trackTitle.textContent = title;
            if (artist) trackArtist.textContent = artist;
            
            // Intentar obtener imagen del álbum desde Last.fm
            if (artist) {
              fetchAlbumArt(artist, title);
            }
            
            // Añadir clase de animación
            const artistWrapper = document.querySelector('.track-artist-wrapper');
            const titleWrapper = document.querySelector('.track-title-wrapper');
            
            // Reset animation by removing and adding class
            artistWrapper.classList.remove('animate-text');
            titleWrapper.classList.remove('animate-text');
            void artistWrapper.offsetWidth; // Trigger reflow
            void titleWrapper.offsetWidth;
            artistWrapper.classList.add('animate-text');
            titleWrapper.classList.add('animate-text');
          }
        }
      } catch (error) {
        console.error('Error al obtener metadatos:', error);
        
        // Si falla, establecer valores predeterminados
        if (!currentTitle && !currentArtist) {
          trackTitle.textContent = 'Transmisión en vivo';
          trackArtist.textContent = 'Vinyl Station Radio';
        }
      }
    }
    
    // Función para obtener imagen del álbum desde Last.fm
    async function fetchAlbumArt(artist, title) {
      try {
        const lastfmKey = '5a059ded7914937c76f55f66751f385a'; // API key pública
        const url = `https://ws.audioscrobbler.com/2.0/?method=track.getInfo&api_key=${lastfmKey}&artist=${encodeURIComponent(artist)}&track=${encodeURIComponent(title)}&format=json`;
        
        const response = await fetch(url);
        const data = await response.json();
        
        if (data && data.track && data.track.album && data.track.album.image) {
          // Get large image
          const images = data.track.album.image;
          const largeImage = images.find(img => img.size === 'large' || img.size === 'extralarge');
          
          if (largeImage && largeImage['#text']) {
            albumArt.innerHTML = `<img src="${largeImage['#text']}" alt="${title}" class="album-image">`;
            return;
          }
        }
        
        // Si la búsqueda de pista no devuelve imagen, intentar buscar por artista
        const artistUrl = `https://ws.audioscrobbler.com/2.0/?method=artist.getinfo&artist=${encodeURIComponent(artist)}&api_key=${lastfmKey}&format=json`;
        const artistResponse = await fetch(artistUrl);
        const artistData = await artistResponse.json();
        
        if (artistData && artistData.artist && artistData.artist.image) {
          const images = artistData.artist.image;
          const largeImage = images.find(img => img.size === 'large' || img.size === 'extralarge');
          
          if (largeImage && largeImage['#text']) {
            albumArt.innerHTML = `<img src="${largeImage['#text']}" alt="${artist}" class="album-image">`;
            return;
          }
        }
        
        // Si no hay imagen, mostrar la predeterminada
        setDefaultAlbumArt();
      } catch (error) {
        console.error('Error al obtener imagen del álbum:', error);
        setDefaultAlbumArt();
      }
    }
    
    function setDefaultAlbumArt() {
      albumArt.innerHTML = `
        <div class="default-album-art">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><circle cx="12" cy="12" r="3"></circle></svg>
        </div>
      `;
    }
    
    function startMetadataCheck() {
      // Comprobar inmediatamente
      updateMetadata();
      // Luego cada 15 segundos
      metadataCheckInterval = setInterval(updateMetadata, 15000);
    }
    
    function stopMetadataCheck() {
      if (metadataCheckInterval) {
        clearInterval(metadataCheckInterval);
      }
    }
    
    // Evento para reproducir/pausar
    playPauseButton.addEventListener('click', function() {
      if (!isPlaying) {
        Amplitude.play();
      } else {
        Amplitude.pause();
      }
    });
    
    // Evento para silenciar/activar sonido
    muteButton.addEventListener('click', function() {
      if (!isMuted) {
        // Guardar el volumen actual antes de silenciar
        muteButton.dataset.lastVolume = Amplitude.getVolume();
        Amplitude.setVolume(0);
      } else {
        // Restaurar el último volumen
        const lastVolume = parseFloat(muteButton.dataset.lastVolume || 0.8);
        Amplitude.setVolume(lastVolume);
      }
    });
    
    // Evento para cambiar volumen
    volumeSlider.addEventListener('input', function() {
      Amplitude.setVolume(this.value / 100);
    });
    
    // Iniciar automáticamente al hacer clic en el reproductor (excepto en controles)
    document.querySelector('.custom-radio-player').addEventListener('click', function(e) {
      // Evitar que se active automáticamente al hacer clic en los controles
      if (!e.target.closest('button') && !e.target.closest('input') && !isPlaying) {
        Amplitude.play();
      }
    });
    
    // Intentar obtener metadatos iniciales
    setTimeout(updateMetadata, 1000);
  });
</script>

<style>
  .custom-radio-player {
    display: flex;
    align-items: center;
    background: linear-gradient(to right, #1a1a1a, #2a2a2a);
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    height: 100%;
    width: 100%;
    padding: 0 10px;
    position: relative;
  }
  
  .custom-radio-player::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(to right, rgba(255,107,107,0.5), rgba(254,202,87,0.5));
  }

  .radio-now-playing {
    display: flex;
    align-items: center;
    flex: 1;
    min-width: 0;
    padding-right: 10px;
  }

  .radio-album-art {
    width: 40px;
    height: 40px;
    flex-shrink: 0;
    border-radius: 6px;
    overflow: hidden;
    background: #333;
    margin-right: 10px;
  }
  
  .album-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .default-album-art {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #666;
  }

  .radio-info {
    flex: 1;
    min-width: 0;
    display: flex;
    flex-direction: column;
  }
  
  .radio-status {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 2px;
  }
  
  #station-name {
    font-size: 0.75rem;
    font-weight: 600;
    color: #ff6b6b;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .live-indicator {
    display: flex;
    align-items: center;
    gap: 4px;
  }
  
  .live-dot {
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background-color: #666;
    transition: all 0.3s ease;
  }
  
  .live-dot.active {
    background-color: #ff5252;
    box-shadow: 0 0 6px #ff5252;
    animation: pulse 1.5s infinite;
  }
  
  .live-text {
    font-size: 0.65rem;
    text-transform: uppercase;
    color: #888;
    font-weight: 600;
  }
  
  @keyframes pulse {
    0% { box-shadow: 0 0 0 0 rgba(255, 82, 82, 0.7); }
    70% { box-shadow: 0 0 0 5px rgba(255, 82, 82, 0); }
    100% { box-shadow: 0 0 0 0 rgba(255, 82, 82, 0); }
  }
  
  .track-info {
    display: flex;
    flex-direction: column;
  }
  
  .track-title-wrapper,
  .track-artist-wrapper {
    white-space: nowrap;
    overflow: hidden;
  }
  
  .track-title {
    font-size: 0.85rem;
    font-weight: 600;
    color: #fff;
  }
  
  .track-artist {
    font-size: 0.75rem;
    color: #aaa;
  }
  
  /* Animación para texto largo */
  @keyframes scroll-text {
    0% { transform: translateX(0); }
    10% { transform: translateX(0); }
    60% { transform: translateX(calc(-100% + 120px)); }
    70% { transform: translateX(calc(-100% + 120px)); }
    100% { transform: translateX(0); }
  }
  
  .animate-text .track-title,
  .animate-text .track-artist {
    display: inline-block;
    animation: scroll-text 20s ease-in-out infinite;
  }

  .radio-controls {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .control-button {
    background: none;
    border: none;
    cursor: pointer;
    color: #fff;
    padding: 5px;
    border-radius: 50%;
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    position: relative;
  }
  
  .control-button:hover {
    background: rgba(255, 255, 255, 0.1);
  }
  
  .control-button:active {
    transform: scale(0.95);
  }
  
  .play-pause .play-icon,
  .play-pause .pause-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: opacity 0.2s ease;
  }
  
  .play-pause .pause-icon {
    opacity: 0;
  }
  
  .play-pause.playing .play-icon {
    opacity: 0;
  }
  
  .play-pause.playing .pause-icon {
    opacity: 1;
  }
  
  .volume-container {
    display: flex;
    align-items: center;
    gap: 8px;
  }
  
  .volume-button .volume-icon,
  .volume-button .mute-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: opacity 0.2s ease;
  }
  
  .volume-button .mute-icon {
    opacity: 0;
  }
  
  .volume-button.muted .volume-icon {
    opacity: 0;
  }
  
  .volume-button.muted .mute-icon {
    opacity: 1;
  }
  
  .volume-slider-container {
    width: 60px;
    position: relative;
  }
  
  .volume-slider {
    -webkit-appearance: none;
    width: 100%;
    height: 4px;
    border-radius: 2px;
    background: #444;
    outline: none;
    transition: all 0.2s;
  }
  
  .volume-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: #ff6b6b;
    cursor: pointer;
    transition: all 0.2s;
  }
  
  .volume-slider::-moz-range-thumb {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: #ff6b6b;
    cursor: pointer;
    border: none;
    transition: all 0.2s;
  }
  
  .volume-slider::-webkit-slider-thumb:hover {
    transform: scale(1.2);
  }
  
  .volume-slider::-moz-range-thumb:hover {
    transform: scale(1.2);
  }
  
  /* Adaptación responsive */
  @media (max-width: 480px) {
    .custom-radio-player {
      flex-direction: column;
      padding: 8px;
      height: auto;
    }
    
    .radio-now-playing {
      width: 100%;
      padding-right: 0;
      margin-bottom: 8px;
    }
    
    .radio-controls {
      width: 100%;
      justify-content: center;
    }
    
    .volume-slider-container {
      width: 100px;
    }
  }
</style>
